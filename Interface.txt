Interface :

Set of rules or Contract

an interface is a collection of abstract methods and constants (i.e. static and final fields).
It is used to achieve complete abstraction.

An interface can contain any number of methods.

Interface methods do not have a body - the body is provided by the "implement" class

On implementation of an interface, you must override all of its methods

When a class implements an interface, it should implimets all of its methods. 
If a class does not perform all the behaviors of the interface, the class must declare itself as abstract.

 Java does not support "multiple inheritance" (a class can only inherit from one superclass). However, it can be 
achieved with interfaces, because the class can implement multiple interfaces. 

Note: To implement multiple interfaces, separate them with a comma (see example below).

 we can provide interface methods to the third-party vendors for their implementation.

Where Interface concept is applied in our real life

With the help of credit card one can purchase or do any transactions in dollars, or pounds or rupees or any other currency. E-commerce giants like Amazon, eBay all accept credit card payment with different currency. Credit card is like an interface that performs several tasks. Credit card does not hold money in a physical form. Then how the shopkeepers or these online e-commerce companies can get the money. Behind the credit card, have our individual bank a/c details from where the actual money is transferred after authentication. The bank a/c is the implementation class and credit card are an interface.

Interface Concept in Selenium


For example, to run in Chrome browser Selenium people have developed a class called Chrome Driver. This Chrome Driver class will have all the methods which will help you to automate in chrome browser.
get (), getCurentUrl(), getTitle(), findElements(), findElement(), quit() and close() are few methods present inside the Chrome Driver, Firefox Driver, Edge Driver and Internet Explorer Driver classes. There are many more methods inside these driver classes.
To use these methods we create an object of that class. For ex ChromeDriver driver=new ChomeDriver();
The beauty of Selenium is all these classes will have the same method name,but only inner implementation will change.
 How do these classes have common method names? Here comes the concept of Interface.
Have you ever understood why we write the code as WebDriver driver=new ChromeDriver(); instead of ChromeDriver driver=new ChromeDriver();
 WebDriver is an interface. Classes like Firefox,Chrome,Microsoft edge etc. will follow the rules imposed by WebDriver interface and each class will implement the methods. You can also refer https://www.selenium.dev which is the selenium official website where you will find the WebDriver interface and its implementing classes.
Hence we write the syntax as WebDriver driver=new ChromeDriver(); driver object has access to the methods of Chrome Driver which are defined in Web Driver interface.
