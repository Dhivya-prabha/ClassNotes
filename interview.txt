
1) inspect the text SQL in http://www.leafground.com/pages/checkbox.html

(//input[@type="checkbox"]/following-sibling::text())[3]


2) How to run a testcase in headless mode?

val chromeOptions = new ChromeOptions
chromeOptions.addArguments("--headless")
new ChromeDriver(chromeOptions)

ChromeOptions options = new ChromeOptions();  
options.setHeadless(true); //Set Chrome option
driver = new ChromeDriver(options);  

3) How to send values in selenium without using sendkeys?

JavascriptExecutor JS = (JavascriptExecutor)webdriver;
JS.executeScript("document.getElementById('Pass').value='tester'");


   WebElement name= driver.findElement(By.xpath("your xpath");
    JavascriptExecutor js = (JavascriptExecutor) driver;
  js.executeAsyncScript("arguments[0].value='admin'",name); 

4) How do you upload a file using Selenium WebDriver?
To upload a file we can simply use the command element.send_keys(file path). But there is a prerequisite before 
we upload the file. We have to use the html tag: ‘input’ and attribute type should be ‘file’. 

5) What is Selenium server default port number?
 	
Selenium server default port number is 4444.

6)What is an Object Repository in Selenium?
An object repository is a centralized storage of locators in the form of objects. QAs store all the element locators in a separate file, also referred to as a property file (.properties) in Selenium. The property file stores information in a key-value pair format. This file serves as an object repository in Selenium WebDriver. 


7)All selenium exceptions are runtime exceptions or compile exception?
	Runtime exceptions

8)Is webdriver is an interface or class?

SearchContext is the super most interface in selenium, which is extended by another interface called WebDriver.
All the abstract methods of SearchContext and WebDriver interfaces are implemented in RemoteWebDriver class.
All the browser related classes such as FirefoxDriver, ChromeDriver etc., extends the RemoteWebdriver class.

9)How can you convert a String to an int in Java?
Integer.parseInt("12",16); 
Integer.valueOf("12",16);

10)Difference between Action and Actions in Selenium

In Selenium WebDriver, Action and Actions are two different classes that deal with performing complex user interactions like mouse movements, drag-and-drop, clicking multiple elements, etc. Here’s an explanation of both:

1. Actions Class
The Actions class is used to build a series of complex actions like mouse and keyboard interactions. It provides methods to handle multiple user interactions such as double-click, right-click, drag-and-drop, and more. The Actions class is part of the org.openqa.selenium.interactions package.

Key Features of the Actions Class:
Allows building composite actions like a series of actions to be performed in sequence.
It provides methods for mouse actions (e.g., click(), doubleClick(), moveToElement()) and keyboard actions (e.g., sendKeys()).
Used to create an action chain that can be executed by calling perform() at the end of the action chain.
Common Methods in the Actions Class:
click()
doubleClick()
contextClick() (right-click)
dragAndDrop()
moveToElement()
sendKeys()

Actions actions = new Actions(driver);
actions.moveToElement(element).click().perform();


In Selenium WebDriver, Action and Actions are two different classes that deal with performing complex user interactions like mouse movements, drag-and-drop, clicking multiple elements, etc. Here’s an explanation of both:

1. Actions Class
The Actions class is used to build a series of complex actions like mouse and keyboard interactions. It provides methods to handle multiple user interactions such as double-click, right-click, drag-and-drop, and more. The Actions class is part of the org.openqa.selenium.interactions package.

Key Features of the Actions Class:
Allows building composite actions like a series of actions to be performed in sequence.
It provides methods for mouse actions (e.g., click(), doubleClick(), moveToElement()) and keyboard actions (e.g., sendKeys()).
Used to create an action chain that can be executed by calling perform() at the end of the action chain.
Common Methods in the Actions Class:
click()
doubleClick()
contextClick() (right-click)
dragAndDrop()
moveToElement()
sendKeys()
Example of Actions Class:
java
Copy code
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

public class ActionsExample {
    public static void main(String[] args) {
        // Set up WebDriver
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        // Navigate to a webpage
        driver.get("https://example.com");

        // Locate an element
        WebElement element = driver.findElement(By.id("elementId"));

        // Create an instance of the Actions class
        Actions actions = new Actions(driver);

        // Perform a series of actions - move to the element and click it
        actions.moveToElement(element).click().perform();

        // Close the driver
        driver.quit();
    }
}
In the example above, we create an Actions object and use moveToElement() to hover over an element, followed by a click(), and then call perform() to execute the action sequence.

Action Interface
The Action interface represents a single user interaction, such as clicking, sending keys, or moving the mouse. When you build a chain of actions using the Actions class, you can create an Action object and then execute it using the perform() method.

Key Points about Action:
Action is an interface that represents one interaction action like click(), dragAndDrop(), etc.
You don’t create an Action directly. Instead, it is typically created as part of the Actions class’s build() method.
An Action is usually a single operation that you can execute, as opposed to multiple actions being chained together.

Actions actions = new Actions(driver);
Action action = actions.moveToElement(element).click().build();
Action.perform();
