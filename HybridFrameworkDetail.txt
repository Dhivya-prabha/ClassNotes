Hybrid Framework:
======================
	This framework is designed based on Page Object Model. 
We used Selenium to interact with Web application, TestNg is used for test execution.
Apache POI to read the data from excel to support multiple data testing. 
Cucumber is used to support the BDD approach and Extent report is used to get
a html automation summary report.


What are the components:
=====================
1. Browser and Element interfaces to design this framework

Browser interface contains all browser related methods like, 

startApp(String url, boolean headless);
locateElement(Locators locatorType, String value);
locateElements(Locators locatorType, String value);	
switchToAlert();
acceptAlert();
switchToWindow(String title);
switchToFrame(String idOrName);
verifyTitle(String title)
verifyUrl(String url


Element interface contains all element related methods like, 

click(WebElement ele);
append(WebElement ele, String data); 
clear(WebElement ele);
clearAndType(WebElement ele,String data)
selectDropDownUsingText(WebElement ele, String value) ;
selectDropDownUsingIndex(WebElement ele, int index) ;
verifyDisappeared(WebElement ele);
verifyExactText(WebElement ele, String expectedText);
verifyPartialText(WebElement ele, String expectedText);
verifyExactAttribute(WebElement ele, String attribute, String value);


2. SeleniumBase is the library for the Wrapper methods which implemented from Browser and element interfaces

we have a method for locating element which is overridden from browser interface is written to avoid the repeated code writing for driver.findelement(By)
we get the locator type and value as an argument and return the corresponding locator code in switch case block
 if the case is xpath it will return driver().findElement(By.xpath(value));
And additionally we added proper waits, try catch block for error management and descriptions for pass and failed  steps for report generation 

3. ProjectSpecificMethods as Base class for pages and testcases which extends SeleniumBase 
contains dataprovider, pre and post conditions
the data provider will run initially before the testcase execution so it is defined here 
in pre condtions we have to set the browser type and the application url in post condition the method close browser will be there


4. pages package to have the classes for each page
each class contains methods for every actions. Here we dont define a variable like 

 private By usernameBy = By.name("user_name");
indtead we use locateElement method which is in selenium wrapper class to locate the element with locater and value

clearAndType(locateElement("xpath", "xpath value"), data);

here, each method should return the same page or corresponded landing page

5. Testcases package to have the classes for each test case

6. Utils package to have the classes related to external applications
	DataLibrary(to read data from excel)
	Reporter(Configuration for ExtentReport)
	in extent report we use ExtentHtmlReporter class to create a html file and we use ExtentReports class to attach the reports to html file

and we define testCaseName, testDescription, nodes, authors, Test category in reporter class as public string variables and we set the values for these in each testcase under @BeforeTest. 
Also we have a method for ScreenCapture which is attached to each step of testcase for both pass and failed status. And captured images are saved in the name of current date and time.
 
So each step will have a screen shot for each pass and failed steps along with the description in html report                                                   

finally extent.flush writes all the test log information (pass/fail/skipped statuses, screenshots, etc.) to the report file.

Apart from this we pass the data to applications in various ways

first one is passing values as a parameter from xml file to methods
to accomplish this we have to pass the value via parameter tag from xml like <parameter name = 'username' value = 'Dhivya'
></parameter like this ]  and in the method we can receive this data by using @parameters attribute. to get it we have to define the @parameter attribute above the  @bforemethod and we can pass the data via the method as an argument.

Second one is to pass the data via Excel file.
for this we have to  write a method to read the data from excel and return the data as a 2 dimensional object array because based on row and column we are returning it as 2 dimensional array and we send an excel name from each page class in @before test attribute and this method is defined in base class under @DataProvider attribute. We have to call and execute read excel method from based class because it need to execute before each class execution. We can set some limitation in data fetching with the attribute indices.

Third one is, 

to get the data from properties file. We have data in properties in Key, value format. By creating an object for Java inbuild class Properties we can access the properties file. to do that we have to get the file with load method. then we can get the value from the properties with property.getProperty() method.


Hirerarchy of Execution / Execution flow:
@BeforeSuit - (here it'll execute the reporter class start and create a report file from reporter class)
@BeforeTest - (In each  testcase, we set a test case description, author, test category and excel sheet name in setValues method)
@BeforeClass -   (it'll execute the report methods which assign the values to test, from setValues method) test = extent.createTest(testCaseName, testDescription);

@DataProvider() - It'll execute the dataprovider from ProjectSpecificMethod
 
@BeforeMethod() - It'll execute the StartApp method to start the Application From ProjectSpecificMethod
@Test() - then it'll execute the @test method and testcase execution
                                                                            
@BeforeMethod - It'll close the application once the @test is over and it's available in ProjectSpecificMethod
@AfterClass -  there no @afterclass in our framework
@AfterTest - there no @afterclass in our framework
@AfterSuit - available in reporter class and it execute StopReport method() which has the extend.flush methods to attach all the data to html report
 	
