
BDD (Behavior-driven development) Testing is a technique of agile software development and is as an extension of TDD, i.e., Test Driven Development
BDD – centers around stories that describe the expected behavior of an application. The idea is to describe how the application should behave in a very simple user/business-focused language. which means, test cases are written in a natural language that even non-programmers can read.
With BDD-based tests running during your Continuous Integration process, you can give stakeholders fast feedback on whether the functionality is actually implemented and working–in terms that they can easily understand

With BDD, tests are created using the gherkin language.

Tools:
Cucumber
JBehave
JDave
FitNesse
Concordion
SpecFlow

One .feature file can have only one feature
That suould be written at first
One feature file can have multiple scenario  
Each scenario can have multiple steps
Each keyword can repeat any number of times

Step level keywords:
Given - pre condition
When - condition
Then - Post condition
And - Join
But - Negative step 

If same steps are repeating, then we can have the steps in Background - only for that feature file
(Common steps can be moved to background)



annotation in feature file and step definition can be change.
(If u give the step in And and mention the step in @given in step definition it'll not throw an error)
It's completely based on the steps.

@cucumberoptions
features = path to the feature file
Glue = used to mention the package name where the step definition is exist
monochrome = true to remove the junk characters


multiple methods are not allowed for a single step(feature step)
Method can have multiple steps


" https://cucumber.io/docs/cucumber/cucumber-expressions/"



feature file Steps can be implimented in anywhere of the java class 

Background is applicable for only that feature file. If we create a another feature file with
ligin we have to write login functionlaity again


we can not extend the classes that define step definitions or hooks


tags = {"@smoke,@regresion"} - execute the scenario with regression"or" smoke
tags = {"@smoke","@regresion"} - execute the scenario with regression "and" smoke
tags = {"~@regresion"} - execute all the scenarios except regression

cucumber can not be run in parallel because of implimentation

parallel run in cucumber can be achived by(only have example data will be run in parallel)
runner class->dataprovider='true'
